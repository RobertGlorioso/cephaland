
==================== FINAL INTERFACE ====================
2018-07-10 03:47:46.384763 UTC

interface main@main:Util 8002
  interface hash: 845e6a9003b08f10b2d6cf72f7e8ddaa
  ABI hash: 50da0cb328d3232718ed28661fd8372a
  export-list hash: a97dc3cf399b9290775272ef77023ee5
  orphan hash: 94bee5aa25a76a3d63d997d2b8a12b59
  flag hash: e330827399adc314f576e6c00a8065e2
  sig of: Nothing
  used TH splices: False
  where
exports:
  Util.aabb
  Util.abBox
  Util.applyView
  Util.box
  Util.boxInBox
  Util.cycle1
  Util.hLine
  Util.handlePic
  Util.mapVertices
  Util.mouseToWorld
  Util.shift
  Util.toPicture
  Util.updateCamera
  Util.v2ToTuple
  Util.vLine
  Util.vToRad
  Util.Convex{Util.Convex radius vertices}
module dependencies: Data
package dependencies: GLURaw-2.0.0.3@GLURaw-2.0.0.3-Dsh0J6RJGCYIX4KzhPpy5R
                      GLUT-2.7.0.12@GLUT-2.7.0.12-DC8hzFoSREsLOe0a29m1po
                      ObjectName-1.1.0.1@ObjectName-1.1.0.1-EiFOWjUQWWuLyOhtrmuIWX
                      OpenGL-3.0.2.0@OpenGL-3.0.2.0-6fbDRkN7rpfG63nVz30IBa
                      OpenGLRaw-3.2.5.0@OpenGLRaw-3.2.5.0-8JxKpZbO2kWCx46iLc1G4X
                      StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO
                      adjunctions-4.3@adjunctions-4.3-A5jfd1yrmaY4DRMJuiquBp
                      apecs-0.4.1.0@apecs-0.4.1.0-5Dq3f9B8Tv5E9yBPZjGUoi
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw
                      binary-0.8.3.0@binary-0.8.3.0
                      bmp-1.2.6.3@bmp-1.2.6.3-43OLkH0uuwm831pBFpx2PZ
                      bytes-0.15.3@bytes-0.15.3-16oYXSNZBSJFzWzUAkfvFP
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      call-stack-0.1.0@call-stack-0.1.0-FYVrCPXGP9EGAuTW32963O
                      cereal-0.5.4.0@cereal-0.5.4.0-BsAGxfp8yAs3CiRo2E875e
                      comonad-5.0.2@comonad-5.0.2-Fq9Xy9jdx6uIyJZn00E6Yc
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-29zF0Im431177ovfbHYCGv
                      data-default-class-0.1.2.0@data-default-class-0.1.2.0-GsXqKN6o1X9jr0fF5qCVD
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      distributive-0.5.3@distributive-0.5.3-IX4kyVcHAyoH4uFYrsjY1R
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      fixed-0.2.1.1@fixed-0.2.1.1-8Jr82l0kss5Gr4nEevmXlZ
                      free-4.12.4@free-4.12.4-C2gBQV0m8J42HxqSLTFyVx
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      gloss-1.11.1.1@gloss-1.11.1.1-8GzjbnWS46V6aZCKK1kaHi
                      gloss-rendering-1.11.1.1@gloss-rendering-1.11.1.1-2H1Z0FJPE28CgZNofHijuT
                      half-0.2.2.3@half-0.2.2.3-GHJ372Ls7FBA3PAGtGHfOR
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      kan-extensions-5.0.2@kan-extensions-5.0.2-8LTJJ1zQJWB7SfewWXUuqX
                      lens-4.15.4@lens-4.15.4-3P7PSyaTsWRLQnkSsAPtwp
                      lifted-base-0.2.3.11@lifted-base-0.2.3.11-Ei0JSPdt7KOCD2HIA5jFqV
                      linear-1.20.7@linear-1.20.7-4PKkOlhi7IG9pMVvpI5r6H
                      monad-control-1.0.2.2@monad-control-1.0.2.2-1Ci8dYJ8Tb7E3HTcTqOb8l
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-BhL9U5k7NtGJn1itwIHt2Y
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      profunctors-5.2.1@profunctors-5.2.1-Ga89Nyw0d7LBEIoX4AZ6gT
                      reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4
                      scientific-0.3.5.1@scientific-0.3.5.1-JHsAAp34Yyd8e5v3sK3O5Q
                      sdl2-2.2.0@sdl2-2.2.0-3Y0LJW9w0uGBX3EWPEbkgf
                      sdl2-mixer-1.1.0@sdl2-mixer-1.1.0-LX59oFy5f5B564Mb5zRJ6y
                      semigroupoids-5.2.1@semigroupoids-5.2.1-Db8txM8kTsI6Y49CY6g5Jn
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      th-abstraction-0.2.5.0@th-abstraction-0.2.5.0-IQJC3onXzKuCarhyL6pEOQ
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-base-0.4.4@transformers-base-0.4.4-GKSs0LKukAL8ymq2naFmrH
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         gloss-rendering-1.11.1.1@gloss-rendering-1.11.1.1-2H1Z0FJPE28CgZNofHijuT:Graphics.Gloss.Internals.Data.Picture
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         linear-1.20.7@linear-1.20.7-4PKkOlhi7IG9pMVvpI5r6H:Linear.Instances
         reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4:Data.Reflection
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjunctions-4.3-A5jfd1yrmaY4DRMJuiquBp:Data.Functor.Rep
                         apecs-0.4.1.0@apecs-0.4.1.0-5Dq3f9B8Tv5E9yBPZjGUoi:Apecs.Core
                         apecs-0.4.1.0@apecs-0.4.1.0-5Dq3f9B8Tv5E9yBPZjGUoi:Apecs.Stores
                         apecs-0.4.1.0@apecs-0.4.1.0-5Dq3f9B8Tv5E9yBPZjGUoi:Apecs.Util
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Biff
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Clown
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Fix
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Flip
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Join
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Joker
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Product
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Sum
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Tannen
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Wrapped
                         bytes-0.15.3@bytes-0.15.3-16oYXSNZBSJFzWzUAkfvFP:Data.Bytes.Get
                         bytes-0.15.3@bytes-0.15.3-16oYXSNZBSJFzWzUAkfvFP:Data.Bytes.Signed
                         bytes-0.15.3@bytes-0.15.3-16oYXSNZBSJFzWzUAkfvFP:Data.Bytes.VarInt
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.0.2@kan-extensions-5.0.2-8LTJJ1zQJWB7SfewWXUuqX:Data.Functor.Day
                         kan-extensions-5.0.2@kan-extensions-5.0.2-8LTJJ1zQJWB7SfewWXUuqX:Data.Functor.Yoneda
                         lens-4.15.4@lens-4.15.4-3P7PSyaTsWRLQnkSsAPtwp:Control.Lens.At
                         lens-4.15.4@lens-4.15.4-3P7PSyaTsWRLQnkSsAPtwp:Control.Lens.Internal.Indexed
                         lens-4.15.4@lens-4.15.4-3P7PSyaTsWRLQnkSsAPtwp:Control.Lens.Reified
                         lens-4.15.4@lens-4.15.4-3P7PSyaTsWRLQnkSsAPtwp:Control.Lens.Tuple
                         lens-4.15.4@lens-4.15.4-3P7PSyaTsWRLQnkSsAPtwp:Control.Lens.Wrapped
                         lens-4.15.4@lens-4.15.4-3P7PSyaTsWRLQnkSsAPtwp:Control.Lens.Zoom
                         linear-1.20.7@linear-1.20.7-4PKkOlhi7IG9pMVvpI5r6H:Linear.Affine
                         linear-1.20.7@linear-1.20.7-4PKkOlhi7IG9pMVvpI5r6H:Linear.Plucker
                         linear-1.20.7@linear-1.20.7-4PKkOlhi7IG9pMVvpI5r6H:Linear.Quaternion
                         linear-1.20.7@linear-1.20.7-4PKkOlhi7IG9pMVvpI5r6H:Linear.V
                         linear-1.20.7@linear-1.20.7-4PKkOlhi7IG9pMVvpI5r6H:Linear.V0
                         linear-1.20.7@linear-1.20.7-4PKkOlhi7IG9pMVvpI5r6H:Linear.V1
                         linear-1.20.7@linear-1.20.7-4PKkOlhi7IG9pMVvpI5r6H:Linear.V2
                         linear-1.20.7@linear-1.20.7-4PKkOlhi7IG9pMVvpI5r6H:Linear.V3
                         linear-1.20.7@linear-1.20.7-4PKkOlhi7IG9pMVvpI5r6H:Linear.V4
                         main@main:Data
                         monad-control-1.0.2.2@monad-control-1.0.2.2-1Ci8dYJ8Tb7E3HTcTqOb8l:Control.Monad.Trans.Control
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         profunctors-5.2.1@profunctors-5.2.1-Ga89Nyw0d7LBEIoX4AZ6gT:Data.Profunctor.Rep
                         sdl2-2.2.0@sdl2-2.2.0-3Y0LJW9w0uGBX3EWPEbkgf:SDL.Audio
                         sdl2-2.2.0@sdl2-2.2.0-3Y0LJW9w0uGBX3EWPEbkgf:SDL.Event
                         sdl2-2.2.0@sdl2-2.2.0-3Y0LJW9w0uGBX3EWPEbkgf:SDL.Exception
                         sdl2-2.2.0@sdl2-2.2.0-3Y0LJW9w0uGBX3EWPEbkgf:SDL.Hint
                         sdl2-2.2.0@sdl2-2.2.0-3Y0LJW9w0uGBX3EWPEbkgf:SDL.Init
                         sdl2-2.2.0@sdl2-2.2.0-3Y0LJW9w0uGBX3EWPEbkgf:SDL.Input.Joystick
                         sdl2-2.2.0@sdl2-2.2.0-3Y0LJW9w0uGBX3EWPEbkgf:SDL.Input.Keyboard
                         sdl2-2.2.0@sdl2-2.2.0-3Y0LJW9w0uGBX3EWPEbkgf:SDL.Input.Keyboard.Codes
                         sdl2-2.2.0@sdl2-2.2.0-3Y0LJW9w0uGBX3EWPEbkgf:SDL.Input.Mouse
                         sdl2-2.2.0@sdl2-2.2.0-3Y0LJW9w0uGBX3EWPEbkgf:SDL.Internal.Types
                         sdl2-2.2.0@sdl2-2.2.0-3Y0LJW9w0uGBX3EWPEbkgf:SDL.Power
                         sdl2-2.2.0@sdl2-2.2.0-3Y0LJW9w0uGBX3EWPEbkgf:SDL.Time
                         sdl2-2.2.0@sdl2-2.2.0-3Y0LJW9w0uGBX3EWPEbkgf:SDL.Video
                         sdl2-2.2.0@sdl2-2.2.0-3Y0LJW9w0uGBX3EWPEbkgf:SDL.Video.OpenGL
                         sdl2-2.2.0@sdl2-2.2.0-3Y0LJW9w0uGBX3EWPEbkgf:SDL.Video.Renderer
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         th-abstraction-0.2.5.0@th-abstraction-0.2.5.0-IQJC3onXzKuCarhyL6pEOQ:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  apecs-0.4.1.0@apecs-0.4.1.0-5Dq3f9B8Tv5E9yBPZjGUoi:Apecs 9e808a2796d475f24d20fdd8ff1363fd
import  -/  apecs-0.4.1.0@apecs-0.4.1.0-5Dq3f9B8Tv5E9yBPZjGUoi:Apecs.Core b0ec54c44528a3471de8fe8aa48eb8c2
import  -/  apecs-0.4.1.0@apecs-0.4.1.0-5Dq3f9B8Tv5E9yBPZjGUoi:Apecs.System 5f4b18b015fa8f6a97a4c77cc6f92d40
import  -/  apecs-0.4.1.0@apecs-0.4.1.0-5Dq3f9B8Tv5E9yBPZjGUoi:Apecs.Util f93f44fac40f80d395a6bc087e53a294
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.Float 33e2b9ffe427edd6a5c2fd6a3b26703c
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-8GzjbnWS46V6aZCKK1kaHi:Graphics.Gloss bf67b0e05def334587dfecab9a36e1dd
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-8GzjbnWS46V6aZCKK1kaHi:Graphics.Gloss.Geometry.Angle 61f6694a28619ad5734c27137027f59c
import  -/  gloss-rendering-1.11.1.1@gloss-rendering-1.11.1.1-2H1Z0FJPE28CgZNofHijuT:Graphics.Gloss.Internals.Data.Picture 06b134b12b86b8d47d5ac0ceff5d2f70
import  -/  linear-1.20.7@linear-1.20.7-4PKkOlhi7IG9pMVvpI5r6H:Linear afc92d21b81cc135f995c82acab4aa35
import  -/  linear-1.20.7@linear-1.20.7-4PKkOlhi7IG9pMVvpI5r6H:Linear.V2 057a57f5dec031a14519f43cfad7fe97
import  -/  Data 5bdd4396c5b108284b631566f8ea56d9
  exports: 40e9085ca9a663599183c0c76872bc35
  Box e4128b39239815f4be16470a1bc0c776
  Camera 07f816e0d53fb9ee2e9a5cd15bb3c1d7
  Camera 1ec3475be1ea2b4c711a7bbe834c62dd
  Player c8d3b2b4ff6dcae448f95f0687e3d8a1
  Position d7eb6c2e922f91f98a363f10abd8e452
  World 1ec3475be1ea2b4c711a7bbe834c62dd
22c5a925fbb34d0568a8349cbff6c02f
  $fEqConvex :: GHC.Classes.Eq Util.Convex
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Util.Convex Util.$fEqConvex_$c== Util.$fEqConvex_$c/= -}
22c5a925fbb34d0568a8349cbff6c02f
  $fEqConvex_$c/= :: Util.Convex -> Util.Convex -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Util.Convex) (b :: Util.Convex) ->
                 case Util.$fEqConvex_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
22c5a925fbb34d0568a8349cbff6c02f
  $fEqConvex_$c== :: Util.Convex -> Util.Convex -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Util.Convex) (w1 :: Util.Convex) ->
                 case w of ww { Util.Convex ww1 ww2 ->
                 case w1 of ww3 { Util.Convex ww4 ww5 ->
                 Util.$w$c== ww1 ww2 ww4 ww5 } }) -}
4824ea9aff8a94140433f939d3d02268
  $fEqConvex_$s$fEqV2 ::
    GHC.Classes.Eq (Linear.V2.V2 GHC.Types.Double)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Linear.V2.V2 GHC.Types.Double)
                  (Linear.V2.$fEqV2_$c== @ GHC.Types.Double GHC.Classes.$fEqDouble)
                  Util.$fEqConvex_$s$fEqV2_$c/= -}
a93c222e5501186c914b41ecedf61939
  $fEqConvex_$s$fEqV2_$c/= ::
    Linear.V2.V2 GHC.Types.Double
    -> Linear.V2.V2 GHC.Types.Double -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)S),1*U(U(U),U(U))><S(S(S)S),1*U(U(U),U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Linear.V2.V2 GHC.Types.Double)
                   (eta1 :: Linear.V2.V2 GHC.Types.Double) ->
                 case Linear.V2.$fEqV2_$c==
                        @ GHC.Types.Double
                        GHC.Classes.$fEqDouble
                        eta
                        eta1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
22c5a925fbb34d0568a8349cbff6c02f
  $fShowConvex :: GHC.Show.Show Util.Convex
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Util.Convex
                  Util.$fShowConvex_$cshowsPrec
                  Util.$fShowConvex_$cshow
                  Util.$fShowConvex_$cshowList -}
22c5a925fbb34d0568a8349cbff6c02f
  $fShowConvex1 :: Util.Convex -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Util.Convex) ->
                 case w of ww { Util.Convex ww1 ww2 ->
                 Util.$w$cshowsPrec 0# ww1 ww2 }) -}
dc98a7f000b1abc316ed4816c95577a6
  $fShowConvex2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
995c1d8a4cabbcfa6b9df78a2be17aaf
  $fShowConvex3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "radius = "#) -}
4a1dd3b1fe958b420f46e79331a5247c
  $fShowConvex4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
c083c28a48b98ba1c2ee6b5c8702b934
  $fShowConvex5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "vertices = "#) -}
9ea117328ba436e3abb39aecd724e733
  $fShowConvex6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Convex {"#) -}
cdc3c7146bb148053fc32221b9965334
  $fShowConvex7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
22c5a925fbb34d0568a8349cbff6c02f
  $fShowConvex_$cshow :: Util.Convex -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Util.Convex) ->
                 Util.$fShowConvex_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
22c5a925fbb34d0568a8349cbff6c02f
  $fShowConvex_$cshowList :: [Util.Convex] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Util.Convex
                   Util.$fShowConvex1) -}
22c5a925fbb34d0568a8349cbff6c02f
  $fShowConvex_$cshowsPrec ::
    GHC.Types.Int -> Util.Convex -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Util.Convex) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Util.Convex ww3 ww4 ->
                 Util.$w$cshowsPrec ww1 ww3 ww4 } }) -}
65d3fc1a55e0fbc92a1e53c7e6243902
  $tc'Convex :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15796861753090612999##
                   2941121373116358163##
                   Util.$trModule
                   Util.$tc'Convex1) -}
946a9c8239057e166eda29d3170f6f37
  $tc'Convex1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Convex"#) -}
c588eee85af39e845cefd7f38aac8fac
  $tcConvex :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10289765662665583378##
                   7370138915088146218##
                   Util.$trModule
                   Util.$tcConvex1) -}
00880ca79b6a177ffce71616f1c3f818
  $tcConvex1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Convex"#) -}
1835e484b122c4e1ef6dd6148a192b76
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Util.$trModule2 Util.$trModule1) -}
988d8d710fe83e5597474873d5f93e34
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Util"#) -}
470e660ae2ee50cb8ef640c7661de42f
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
0064f444339d504ae676a5adab374c12
  $w$c== ::
    [Linear.V2.V2 GHC.Types.Double]
    -> GHC.Types.Double
    -> [Linear.V2.V2 GHC.Types.Double]
    -> GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><S,1*U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: [Linear.V2.V2 GHC.Types.Double])
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: [Linear.V2.V2 GHC.Types.Double])
                   (ww3 :: GHC.Types.Double) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (Linear.V2.V2 GHC.Types.Double)
                        Util.$fEqConvex_$s$fEqV2
                        ww
                        ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.eqDouble ww1 ww3 }) -}
0ca6cea871a64063fc407388d3994afb
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> [Linear.V2.V2 GHC.Types.Double]
    -> GHC.Types.Double
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Linear.V2.V2 GHC.Types.Double])
                   (ww2 :: GHC.Types.Double) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { GHC.Types.D# ww4 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble_$sshowFloat
                       Util.$fShowConvex7
                       ww4 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Util.$fShowConvex6
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Util.$fShowConvex5
                          (let {
                             s :: GHC.Base.String
                             = GHC.Base.++
                                 @ GHC.Types.Char
                                 Util.$fShowConvex4
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    Util.$fShowConvex3
                                    (f (GHC.Base.++ @ GHC.Types.Char Util.$fShowConvex2 x)))
                           } in
                           case ww1 of wild {
                             [] -> GHC.CString.unpackAppendCString# "[]"# s
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__2
                                  (case x1 of ww3 { Linear.V2.V2 ww4 ww5 ->
                                   case ww4 of ww6 { GHC.Types.D# ww7 ->
                                   case ww5 of ww8 { GHC.Types.D# ww9 ->
                                   GHC.Base.++
                                     @ GHC.Types.Char
                                     Linear.V2.$fShowV3
                                     (GHC.Float.$w$sshowSignedFloat
                                        GHC.Float.$fShowDouble_$sshowFloat
                                        Linear.V2.$fReadV4
                                        ww7
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.showSpace1
                                           (GHC.Float.$w$sshowSignedFloat
                                              GHC.Float.$fShowDouble_$sshowFloat
                                              Linear.V2.$fReadV4
                                              ww9
                                              (let {
                                                 lvl32 :: [GHC.Types.Char]
                                                 = GHC.Types.:
                                                     @ GHC.Types.Char
                                                     GHC.Show.showList__1
                                                     s
                                               } in
                                               letrec {
                                                 showl :: [Linear.V2.V2 GHC.Types.Double]
                                                          -> GHC.Base.String
                                                   {- Arity: 1, Strictness: <S,1*U> -}
                                                 = \ (ds2 :: [Linear.V2.V2 GHC.Types.Double]) ->
                                                   case ds2 of wild1 {
                                                     [] -> lvl32
                                                     : y ys
                                                     -> GHC.Types.:
                                                          @ GHC.Types.Char
                                                          GHC.Show.shows5
                                                          (case y of ww10 { Linear.V2.V2 ww11 ww12 ->
                                                           case ww11 of ww13 { GHC.Types.D# ww14 ->
                                                           case ww12 of ww15 { GHC.Types.D# ww16 ->
                                                           GHC.Base.++
                                                             @ GHC.Types.Char
                                                             Linear.V2.$fShowV3
                                                             (GHC.Float.$w$sshowSignedFloat
                                                                GHC.Float.$fShowDouble_$sshowFloat
                                                                Linear.V2.$fReadV4
                                                                ww14
                                                                (GHC.Types.:
                                                                   @ GHC.Types.Char
                                                                   GHC.Show.showSpace1
                                                                   (GHC.Float.$w$sshowSignedFloat
                                                                      GHC.Float.$fShowDouble_$sshowFloat
                                                                      Linear.V2.$fReadV4
                                                                      ww16
                                                                      (showl ys)))) } } }) }
                                               } in
                                               showl xs)))) } } }) }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
7ad8c39c2dbe316f5fd59117d4eb344e
  $waabb ::
    GHC.Prim.Double#
    -> GHC.Prim.Double#
    -> GHC.Prim.Double#
    -> GHC.Types.Double
    -> GHC.Prim.Double#
    -> GHC.Prim.Double#
    -> GHC.Prim.Double#
    -> GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,U><S,U><L,1*U(U)><S,U><L,U><S,U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#)
                   (ww1 :: GHC.Prim.Double#)
                   (ww2 :: GHC.Prim.Double#)
                   (ww3 :: GHC.Types.Double)
                   (ww4 :: GHC.Prim.Double#)
                   (ww5 :: GHC.Prim.Double#)
                   (ww6 :: GHC.Prim.Double#)
                   (ww7 :: GHC.Types.Double) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=##
                           (GHC.Prim.-## ww ww2)
                           (GHC.Prim.+## ww4 ww6)) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=##
                                (GHC.Prim.+## ww ww2)
                                (GHC.Prim.-## ww4 ww6)) of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ww3 of wild2 { GHC.Types.D# y ->
                           case ww7 of wild3 { GHC.Types.D# y1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=##
                                     (GHC.Prim.-## ww1 y)
                                     (GHC.Prim.+## ww5 y1)) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=##
                                     (GHC.Prim.+## ww1 y)
                                     (GHC.Prim.-## ww5 y1)) } } } } }) -}
ba575768f296d3c1f458fe529484d612
  $wabBox ::
    GHC.Prim.Double#
    -> GHC.Prim.Double#
    -> GHC.Prim.Double#
    -> GHC.Types.Double
    -> GHC.Prim.Double#
    -> GHC.Prim.Double#
    -> GHC.Prim.Double#
    -> GHC.Types.Double
    -> (# (Linear.V2.V2 GHC.Types.Double, GHC.Types.Double,
           GHC.Types.Double) #)
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,U><S,U><L,U(U)><S,U><L,U><S,U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#)
                   (ww1 :: GHC.Prim.Double#)
                   (ww2 :: GHC.Prim.Double#)
                   (ww3 :: GHC.Types.Double)
                   (ww4 :: GHC.Prim.Double#)
                   (ww5 :: GHC.Prim.Double#)
                   (ww6 :: GHC.Prim.Double#)
                   (ww7 :: GHC.Types.Double) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=##
                           (GHC.Prim.-## ww ww2)
                           (GHC.Prim.+## ww4 ww6)) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=##
                                (GHC.Prim.+## ww ww2)
                                (GHC.Prim.-## ww4 ww6)) of wild1 {
                        GHC.Types.False
                        -> case ww3 of wild2 { GHC.Types.D# y ->
                           case ww7 of wild3 { GHC.Types.D# y1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=##
                                     (GHC.Prim.-## ww1 y)
                                     (GHC.Prim.+## ww5 y1)) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<=##
                                          (GHC.Prim.+## ww1 y)
                                          (GHC.Prim.-## ww5 y1)) of wild5 {
                                  GHC.Types.False
                                  -> (# (Linear.V2.V2
                                           @ GHC.Types.Double
                                           (GHC.Types.D# ww)
                                           (GHC.Types.D# ww1),
                                         GHC.Types.D# ww2, wild2) #)
                                  GHC.Types.True
                                  -> (# (Linear.V2.V2
                                           @ GHC.Types.Double
                                           (GHC.Types.D# ww)
                                           (GHC.Types.D# (GHC.Prim.-## ww5 y1)),
                                         GHC.Types.D# ww2, wild2) #) }
                             GHC.Types.True
                             -> (# (Linear.V2.V2
                                      @ GHC.Types.Double
                                      (GHC.Types.D# ww)
                                      (GHC.Types.D# (GHC.Prim.+## ww5 y1)),
                                    GHC.Types.D# ww2, wild2) #) } } }
                        GHC.Types.True
                        -> (# (Linear.V2.V2
                                 @ GHC.Types.Double
                                 (GHC.Types.D# (GHC.Prim.-## ww4 ww6))
                                 (GHC.Types.D# ww1),
                               GHC.Types.D# ww2, ww3) #) }
                   GHC.Types.True
                   -> (# (Linear.V2.V2
                            @ GHC.Types.Double
                            (GHC.Types.D# (GHC.Prim.+## ww4 ww6))
                            (GHC.Types.D# ww1),
                          GHC.Types.D# ww2, ww3) #) }) -}
fea976a164af73c68736ded9d5327a6f
  $wboxInBox ::
    GHC.Prim.Double#
    -> GHC.Prim.Double#
    -> GHC.Prim.Double#
    -> GHC.Types.Double
    -> GHC.Prim.Double#
    -> GHC.Prim.Double#
    -> GHC.Prim.Double#
    -> GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,U><S,U><L,1*U(U)><S,U><L,U><S,U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#)
                   (ww1 :: GHC.Prim.Double#)
                   (ww2 :: GHC.Prim.Double#)
                   (ww3 :: GHC.Types.Double)
                   (ww4 :: GHC.Prim.Double#)
                   (ww5 :: GHC.Prim.Double#)
                   (ww6 :: GHC.Prim.Double#)
                   (ww7 :: GHC.Types.Double) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>##
                           (GHC.Prim.-## ww ww2)
                           (GHC.Prim.-## ww4 ww6)) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww3 of wild1 { GHC.Types.D# y ->
                      case ww7 of wild2 { GHC.Types.D# y1 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<##
                                (GHC.Prim.+## ww1 y)
                                (GHC.Prim.+## ww5 y1)) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>##
                                     (GHC.Prim.-## ww1 y)
                                     (GHC.Prim.-## ww5 y1)) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<##
                                     (GHC.Prim.+## ww ww2)
                                     (GHC.Prim.+## ww4 ww6)) } } } } }) -}
b8a8ca0e8d7f0ad1c2fca14defee939b
  $wtoPicture ::
    [Linear.V2.V2 GHC.Types.Double]
    -> GHC.Types.Double
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: [Linear.V2.V2 GHC.Types.Double])
                   (ww1 :: GHC.Types.Double) ->
                 case ww of wild {
                   [] -> Util.toPicture1
                   : ds ds1
                   -> case ds of wild1 { Linear.V2.V2 x y ->
                      case x of wild2 { GHC.Types.D# x1 ->
                      case y of wild3 { GHC.Types.D# x2 ->
                      case ds1 of wild4 {
                        []
                        -> Graphics.Gloss.Internals.Data.Picture.Translate
                             (GHC.Types.F# (GHC.Prim.double2Float# x1))
                             (GHC.Types.F# (GHC.Prim.double2Float# x2))
                             (Graphics.Gloss.Internals.Data.Picture.Circle
                                (GHC.Float.double2Float ww1))
                        : ipv ipv1
                        -> case ipv1 of wild5 {
                             []
                             -> Graphics.Gloss.Internals.Data.Picture.Line
                                  (GHC.Types.:
                                     @ Graphics.Gloss.Internals.Data.Picture.Point
                                     (GHC.Types.F# (GHC.Prim.double2Float# x1),
                                      GHC.Types.F# (GHC.Prim.double2Float# x2))
                                     (GHC.Types.:
                                        @ Graphics.Gloss.Internals.Data.Picture.Point
                                        (Util.v2ToTuple ipv)
                                        (GHC.Types.[]
                                           @ Graphics.Gloss.Internals.Data.Picture.Point)))
                             : ipv2 ipv3
                             -> Graphics.Gloss.Internals.Data.Picture.Polygon
                                  (GHC.Base.map
                                     @ (Linear.V2.V2 GHC.Types.Double)
                                     @ (GHC.Types.Float, GHC.Types.Float)
                                     Util.v2ToTuple
                                     wild) } } } } } }) -}
96bd3e44a950f12a1fa81612acf8d972
  $wupdateCamera ::
    Apecs.Core.Has Data.World Data.Camera =>
    GHC.Prim.MutVar# GHC.Prim.RealWorld Data.Camera
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld (Data.IntMap.Base.IntMap Data.Body)
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld (Data.IntMap.Base.IntMap Data.BodyPicture)
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld (GHC.Base.Maybe (GHC.Types.Int, Data.Player))
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld (Data.IntMap.Base.IntMap Data.Position)
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld (Data.IntMap.Base.IntMap Data.Velocity)
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld Data.Gravity
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld (Data.IntMap.Base.IntMap Data.Angle)
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld (GHC.Base.Maybe (GHC.Types.Int, Data.Target))
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld (GHC.Base.Maybe (GHC.Types.Int, Data.Attacking))
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld (GHC.Base.Maybe (GHC.Types.Int, Data.Dash))
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld (Data.IntMap.Base.IntMap Data.Projectile)
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld (Data.IntMap.Base.IntMap Data.ProjCount)
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld (GHC.Base.Maybe (GHC.Types.Int, Data.Sword))
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld (Data.IntMap.Base.IntMap Data.Enemy)
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld (Data.IntMap.Base.IntMap Data.Vitality)
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld (Data.IntMap.Base.IntMap Data.Box)
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld (Data.IntMap.Base.IntMap Data.Resources)
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld (Data.IntMap.Base.IntMap Data.Wall)
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld Apecs.Util.EntityCounter
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 22,
     Strictness: <S(S(S)L),U(U(U),C(C1(U(U,1*U(U)))))><L,U><L,U><L,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
d1d01c62bd1a14f81bc8444ab35882d1
  $wvToRad ::
    (GHC.Float.Floating a, GHC.Classes.Ord a) => a -> a -> a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U(1*U,1*U,A,A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A,A,A,A,A,A,A)><S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Float.Floating a)
                   (w1 :: GHC.Classes.Ord a)
                   (ww :: a)
                   (ww1 :: a) ->
                 let {
                   $dFractional :: GHC.Real.Fractional a = GHC.Float.$p1Floating @ a w
                 } in
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a $dFractional
                 } in
                 case GHC.Classes.compare
                        @ a
                        w1
                        ww
                        (GHC.Num.fromInteger @ a $dNum Util.vToRad2) of wild {
                   GHC.Types.LT
                   -> GHC.Num.+
                        @ a
                        $dNum
                        (GHC.Float.atan @ a w (GHC.Real./ @ a $dFractional ww1 ww))
                        (GHC.Float.pi @ a w)
                   GHC.Types.EQ
                   -> GHC.Num.*
                        @ a
                        $dNum
                        (GHC.Real./
                           @ a
                           $dFractional
                           (GHC.Num.negate @ a $dNum (GHC.Float.pi @ a w))
                           (GHC.Num.fromInteger @ a $dNum Util.vToRad1))
                        (GHC.Num.signum @ a $dNum ww1)
                   GHC.Types.GT
                   -> GHC.Float.atan @ a w (GHC.Real./ @ a $dFractional ww1 ww) }) -}
22c5a925fbb34d0568a8349cbff6c02f
  data Convex
    = Convex {vertices :: [Linear.V2.V2 GHC.Types.Double],
              radius :: GHC.Types.Double}
8160faebd893ce4c4856d75b0253af5d
  aabb :: Data.Box -> Data.Box -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S(S)S)S(S)L)),1*U(1*U(1*U(U(U),U(U)),1*U(U),1*U(U)))><S(S(S(S(S)S)S(S)L)),1*U(1*U(1*U(U(U),U(U)),1*U(U),1*U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Box) (w1 :: Data.Box) ->
                 case w of ww { Data.Box ww1 ->
                 case ww1 of ww2 { (,,) ww3 ww4 ww5 ->
                 case ww3 of ww6 { Linear.V2.V2 ww7 ww8 ->
                 case ww7 of ww9 { GHC.Types.D# ww10 ->
                 case ww8 of ww11 { GHC.Types.D# ww12 ->
                 case ww4 of ww13 { GHC.Types.D# ww14 ->
                 case w1 of ww15 { Data.Box ww16 ->
                 case ww16 of ww17 { (,,) ww18 ww19 ww20 ->
                 case ww18 of ww21 { Linear.V2.V2 ww22 ww23 ->
                 case ww22 of ww24 { GHC.Types.D# ww25 ->
                 case ww23 of ww26 { GHC.Types.D# ww27 ->
                 case ww19 of ww28 { GHC.Types.D# ww29 ->
                 Util.$waabb
                   ww10
                   ww12
                   ww14
                   ww5
                   ww25
                   ww27
                   ww29
                   ww20 } } } } } } } } } } } }) -}
0eb85416eeb42e8b3626b68fc6fcb359
  abBox :: Data.Box -> Data.Box -> Data.Box
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S(S)S)S(S)L)),1*U(U(U(U(U),U(U)),U(U),U(U)))><S(S(S(S(S)S)S(S)L)),1*U(1*U(1*U(U(U),U(U)),1*U(U),1*U(U)))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Box) (w1 :: Data.Box) ->
                 case w of ww { Data.Box ww1 ->
                 case ww1 of ww2 { (,,) ww3 ww4 ww5 ->
                 case ww3 of ww6 { Linear.V2.V2 ww7 ww8 ->
                 case ww7 of ww9 { GHC.Types.D# ww10 ->
                 case ww8 of ww11 { GHC.Types.D# ww12 ->
                 case ww4 of ww13 { GHC.Types.D# ww14 ->
                 case w1 of ww15 { Data.Box ww16 ->
                 case ww16 of ww17 { (,,) ww18 ww19 ww20 ->
                 case ww18 of ww21 { Linear.V2.V2 ww22 ww23 ->
                 case ww22 of ww24 { GHC.Types.D# ww25 ->
                 case ww23 of ww26 { GHC.Types.D# ww27 ->
                 case ww19 of ww28 { GHC.Types.D# ww29 ->
                 case Util.$wabBox
                        ww10
                        ww12
                        ww14
                        ww5
                        ww25
                        ww27
                        ww29
                        ww20 of ww30 { Unit# ww31 ->
                 Data.Box ww31 } } } } } } } } } } } } }) -}
f515908656d61d8152eb6d1adacd05c8
  applyView ::
    Data.Camera
    -> Graphics.Gloss.Internals.Data.Picture.Picture
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SS)L),1*U(1*U(U(U),U(U)),U(U))><L,U>m13,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Camera)
                   (w1 :: Graphics.Gloss.Internals.Data.Picture.Picture) ->
                 case w of ww { Data.Camera ww1 ww2 ->
                 case ww1 of ww3 { Linear.V2.V2 ww4 ww5 ->
                 case ww4 of ww6 { GHC.Types.D# ww7 ->
                 case ww5 of ww8 { GHC.Types.D# ww9 ->
                 Graphics.Gloss.Internals.Data.Picture.Scale
                   (case ww2 of wild { GHC.Types.D# x ->
                    GHC.Types.F# (GHC.Prim.double2Float# x) })
                   (case ww2 of wild { GHC.Types.D# x ->
                    GHC.Types.F# (GHC.Prim.double2Float# x) })
                   (Graphics.Gloss.Internals.Data.Picture.Translate
                      (GHC.Types.F#
                         (GHC.Prim.double2Float# (GHC.Prim.negateDouble# ww7)))
                      (GHC.Types.F#
                         (GHC.Prim.double2Float# (GHC.Prim.negateDouble# ww9)))
                      w1) } } } }) -}
3e17793fbbefe5d2d4ac12e41981d66b
  box ::
    Linear.V2.V2 GHC.Types.Double
    -> GHC.Types.Double -> GHC.Types.Double -> Data.Box
  {- Arity: 3, HasNoCafRefs, Strictness: <S(SS),1*U(U,U)><L,U><L,U>m,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: Linear.V2.V2 GHC.Types.Double)
                   (w :: GHC.Types.Double)
                   (h :: GHC.Types.Double) ->
                 case ds of wild { Linear.V2.V2 x y ->
                 Data.Box (Linear.V2.V2 @ GHC.Types.Double x y, w, h) }) -}
c69ab12884abc4e61375679bcba6f30e
  boxInBox :: Data.Box -> Data.Box -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S(S)S)S(S)L)),1*U(1*U(1*U(U(U),U(U)),1*U(U),1*U(U)))><S(S(S(S(S)S)S(S)L)),1*U(1*U(1*U(U(U),U(U)),1*U(U),1*U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Box) (w1 :: Data.Box) ->
                 case w of ww { Data.Box ww1 ->
                 case ww1 of ww2 { (,,) ww3 ww4 ww5 ->
                 case ww3 of ww6 { Linear.V2.V2 ww7 ww8 ->
                 case ww7 of ww9 { GHC.Types.D# ww10 ->
                 case ww8 of ww11 { GHC.Types.D# ww12 ->
                 case ww4 of ww13 { GHC.Types.D# ww14 ->
                 case w1 of ww15 { Data.Box ww16 ->
                 case ww16 of ww17 { (,,) ww18 ww19 ww20 ->
                 case ww18 of ww21 { Linear.V2.V2 ww22 ww23 ->
                 case ww22 of ww24 { GHC.Types.D# ww25 ->
                 case ww23 of ww26 { GHC.Types.D# ww27 ->
                 case ww19 of ww28 { GHC.Types.D# ww29 ->
                 Util.$wboxInBox
                   ww10
                   ww12
                   ww14
                   ww5
                   ww25
                   ww27
                   ww29
                   ww20 } } } } } } } } } } } }) -}
0fd2ba05e2774c476963d3dc5178cc01
  cycle1 :: [a] -> [a]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: [a]) ->
                 case ds of wild {
                   [] -> Util.cycle2 @ a
                   : h hs
                   -> GHC.Base.augment
                        @ a
                        (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                         GHC.Base.foldr @ a @ b c n hs)
                        (GHC.Types.: @ a h (GHC.Types.[] @ a)) }) -}
bdff0acc1a721f215d14b5438efdb970
  cycle2 :: [a]
  {- Strictness: x -}
62405beb642b96309dbb2d096fd5ef46
  hLine :: GHC.Types.Double -> Util.Convex
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Double) ->
                 Util.Convex
                   (GHC.Types.:
                      @ (Linear.V2.V2 GHC.Types.Double)
                      (case w of wild { GHC.Types.D# x ->
                       Linear.V2.V2
                         @ GHC.Types.Double
                         (GHC.Types.D# (GHC.Prim.negateDouble# (GHC.Prim./## x 2.0##)))
                         Util.hLine1 })
                      (GHC.Types.:
                         @ (Linear.V2.V2 GHC.Types.Double)
                         (case w of wild { GHC.Types.D# x ->
                          Linear.V2.V2
                            @ GHC.Types.Double
                            (GHC.Types.D# (GHC.Prim./## x 2.0##))
                            Util.hLine1 })
                         (GHC.Types.[] @ (Linear.V2.V2 GHC.Types.Double))))
                   Util.hLine1) -}
7ffe3634a90e8f4a6d31a7512f917fe8
  hLine1 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.0##) -}
9497d9a64482075f0a7322acfe5de126
  handlePic ::
    GHC.Base.Maybe Graphics.Gloss.Internals.Data.Picture.Picture
    -> GHC.Types.IO Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Util.handlePic1
                  `cast`
                (<GHC.Base.Maybe Graphics.Gloss.Internals.Data.Picture.Picture>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Graphics.Gloss.Internals.Data.Picture.Picture>_R)) -}
48ecf4f2a8246e2aa812d1159b437650
  handlePic1 ::
    GHC.Base.Maybe Graphics.Gloss.Internals.Data.Picture.Picture
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Graphics.Gloss.Internals.Data.Picture.Picture #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds1 :: GHC.Base.Maybe
                             Graphics.Gloss.Internals.Data.Picture.Picture)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds1 of wild {
                   GHC.Base.Nothing
                   -> case Util.handlePic2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                Graphics.Gloss.Internals.Data.Picture.Picture #)
                      of {}
                   GHC.Base.Just x -> (# eta, x #) }) -}
9561bb19b8dfac9b578401825fb583c9
  handlePic2 ::
    GHC.Types.IO Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: x -}
fbcb5d2cf90e5f9f56bf75529c673282
  mapVertices ::
    (Linear.V2.V2 GHC.Types.Double -> Linear.V2.V2 GHC.Types.Double)
    -> Util.Convex -> Util.Convex
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(1*U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (f :: Linear.V2.V2 GHC.Types.Double
                         -> Linear.V2.V2 GHC.Types.Double)
                   (ds :: Util.Convex) ->
                 case ds of wild { Util.Convex s r ->
                 Util.Convex
                   (GHC.Base.build
                      @ (Linear.V2.V2 GHC.Types.Double)
                      (\ @ b1
                         (c :: Linear.V2.V2 GHC.Types.Double -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ (Linear.V2.V2 GHC.Types.Double)
                         @ b1
                         (GHC.Base.mapFB
                            @ (Linear.V2.V2 GHC.Types.Double)
                            @ b1
                            @ (Linear.V2.V2 GHC.Types.Double)
                            c
                            f)
                         n
                         s))
                   r }) -}
a77fb9a63fa7a28e988f5c855d960584
  mouseToWorld ::
    (GHC.Types.Float, GHC.Types.Float)
    -> Data.Camera -> Linear.V2.V2 GHC.Types.Double
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S(S(S)S(S))S(S)),1*U(1*U(U(U),U(U)),1*U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (GHC.Types.Float, GHC.Types.Float)) (w1 :: Data.Camera) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.F# ww4 ->
                 case ww2 of ww5 { GHC.Types.F# ww6 ->
                 case w1 of ww7 { Data.Camera ww8 ww9 ->
                 case ww8 of ww10 { Linear.V2.V2 ww11 ww12 ->
                 case ww11 of ww13 { GHC.Types.D# ww14 ->
                 case ww12 of ww15 { GHC.Types.D# ww16 ->
                 case ww9 of ww17 { GHC.Types.D# ww18 ->
                 case GHC.Prim./##
                        (GHC.Prim.-## (GHC.Prim.float2Double# ww4) ww14)
                        ww18 of wild2 { DEFAULT ->
                 case GHC.Prim./##
                        (GHC.Prim.-## (GHC.Prim.float2Double# ww6) ww16)
                        ww18 of wild1 { DEFAULT ->
                 Linear.V2.V2
                   @ GHC.Types.Double
                   (GHC.Types.D# wild2)
                   (GHC.Types.D# wild1) } } } } } } } } } }) -}
253d87b141dd6fa389fc2109312a3948
  radius :: Util.Convex -> GHC.Types.Double
  RecSel Left Util.Convex
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Util.Convex) ->
                 case ds of wild { Util.Convex ds1 ds2 -> ds2 }) -}
eb4ce952647e263ea178c18c6262539e
  shift ::
    Linear.V2.V2 GHC.Types.Double -> Util.Convex -> Util.Convex
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(U),U(U))><S,1*U(1*U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Linear.V2.V2 GHC.Types.Double) (w1 :: Util.Convex) ->
                 case w1 of ww { Util.Convex ww1 ww2 ->
                 Util.Convex
                   (GHC.Base.map
                      @ (Linear.V2.V2 GHC.Types.Double)
                      @ (Linear.V2.V2 GHC.Types.Double)
                      (\ (eta1 :: Linear.V2.V2 GHC.Types.Double) ->
                       case w of ww3 { Linear.V2.V2 ww4 ww5 ->
                       case eta1 of ww6 { Linear.V2.V2 ww7 ww8 ->
                       case ww4 of wild { GHC.Types.D# x ->
                       case ww7 of wild1 { GHC.Types.D# y ->
                       case ww5 of wild2 { GHC.Types.D# x1 ->
                       case ww8 of wild3 { GHC.Types.D# y1 ->
                       Linear.V2.V2
                         @ GHC.Types.Double
                         (GHC.Types.D# (GHC.Prim.+## x y))
                         (GHC.Types.D# (GHC.Prim.+## x1 y1)) } } } } } })
                      ww1)
                   ww2 }) -}
036fef59e374da02348e819fb3085f8d
  toPicture ::
    Util.Convex -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Util.Convex) ->
                 case w of ww { Util.Convex ww1 ww2 ->
                 Util.$wtoPicture ww1 ww2 }) -}
da13438bcfb238a63e1646cfadd39c23
  toPicture1 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- HasNoCafRefs,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Polygon
                   (GHC.Types.[] @ (GHC.Types.Float, GHC.Types.Float))) -}
5003073b3dddc951cd4eb1359bc49547
  updateCamera ::
    Apecs.Core.Has Data.World Data.Camera =>
    Apecs.Core.System Data.World ()
  {- Arity: 3,
     Strictness: <S(S(S)L),U(U(U),C(C1(U(U,1*U(U)))))><S(LLLSLLLLLLLLLLLLLLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Util.updateCamera1
                  `cast`
                (<Apecs.Core.Has Data.World Data.Camera>_R
                 ->_R Trans
                          (<Data.World>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N <Data.World>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Apecs.Core.N:System[0] <Data.World>_R) <()>_N))) -}
04837ea3663e9619a2da3f960ba989ff
  updateCamera1 ::
    Apecs.Core.Has Data.World Data.Camera =>
    Data.World
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <S(S(S)L),U(U(U),C(C1(U(U,1*U(U)))))><S(LLLSLLLLLLLLLLLLLLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Apecs.Core.Has Data.World Data.Camera)
                   (w1 :: Data.World)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { Data.World ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 Util.$wupdateCamera
                   w
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   w2 }) -}
27e3d2a5c811008400c81ad5cbe65630
  v2ToTuple ::
    Linear.V2.V2 GHC.Types.Double -> (GHC.Types.Float, GHC.Types.Float)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(U(U),U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Linear.V2.V2 GHC.Types.Double) ->
                 case ds of wild { Linear.V2.V2 x y ->
                 (case x of wild1 { GHC.Types.D# x1 ->
                  GHC.Types.F# (GHC.Prim.double2Float# x1) },
                  case y of wild1 { GHC.Types.D# x1 ->
                  GHC.Types.F# (GHC.Prim.double2Float# x1) }) }) -}
063295046d5bf7c8e7512efee76b3444
  vLine :: GHC.Types.Double -> Util.Convex
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Double) ->
                 Util.Convex
                   (GHC.Types.:
                      @ (Linear.V2.V2 GHC.Types.Double)
                      (case w of wild { GHC.Types.D# x ->
                       Linear.V2.V2
                         @ GHC.Types.Double
                         Util.hLine1
                         (GHC.Types.D# (GHC.Prim./## x 2.0##)) })
                      (GHC.Types.:
                         @ (Linear.V2.V2 GHC.Types.Double)
                         (case w of wild { GHC.Types.D# x ->
                          Linear.V2.V2
                            @ GHC.Types.Double
                            Util.hLine1
                            (GHC.Types.D# (GHC.Prim.negateDouble# (GHC.Prim./## x 2.0##))) })
                         (GHC.Types.[] @ (Linear.V2.V2 GHC.Types.Double))))
                   Util.hLine1) -}
9a94cf09baf4a396d19ef6f0ebeead40
  vToRad ::
    (GHC.Float.Floating a, GHC.Classes.Ord a) => Linear.V2.V2 a -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,U(1*U,1*U,A,A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A,A,A,A,A,A,A)><S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S(SS),1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Float.Floating a)
                   (w1 :: GHC.Classes.Ord a)
                   (w2 :: Linear.V2.V2 a) ->
                 case w2 of ww { Linear.V2.V2 ww1 ww2 ->
                 Util.$wvToRad @ a w w1 ww1 ww2 }) -}
aff57be6266e10b594a57e92201c65a4
  vToRad1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
febf74d898dc10c182943ecf410dc218
  vToRad2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
93122a206bfd68bf6a5b40c11c8979c6
  vertices :: Util.Convex -> [Linear.V2.V2 GHC.Types.Double]
  RecSel Left Util.Convex
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Util.Convex) ->
                 case ds of wild { Util.Convex ds1 ds2 -> ds1 }) -}
instance GHC.Classes.Eq [Util.Convex] = Util.$fEqConvex
instance GHC.Show.Show [Util.Convex] = Util.$fShowConvex
"SPEC/Util $fEqV2 @ Double" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                       GHC.Types.Double)
  Linear.V2.$fEqV2 @ GHC.Types.Double $dEq = Util.$fEqConvex_$s$fEqV2
"SPEC/Util $fEqV2_$c/= @ Double" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                            GHC.Types.Double)
  Linear.V2.$fEqV2_$c/= @ GHC.Types.Double $dEq
  = Util.$fEqConvex_$s$fEqV2_$c/=
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

